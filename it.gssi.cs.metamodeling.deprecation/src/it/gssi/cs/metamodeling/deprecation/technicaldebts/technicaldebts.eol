var weight_i_deprecated = 1;
var weight_slot_deprecated = 0.5;



operation allPackages(): Set{
var list = new Set;
var top = M.allInstances().first.eClass.ePackage.getTopPackage();
	list.add(top);
	list=list.includingAll(top.eSubPackages);
	return list;
}

operation Any getTopPackage(): Any{
if(not self.eSuperPackage.isUndefined()){
	return self.eSuperPackage.getTopPackage();
} 
return self;
}

operation allMetaclasses(): Sequence{
var list = new Sequence;

for (p in allPackages()) { 
//select(c|M.isInstantiable(c.name)
	list=list.includingAll(p.eClassifiers);
}
return list;
}

operation Any sameObj(o: Any): Boolean{

return emfTool.ecoreUtil.equals(self,o);
}

operation Any getInstances(): Sequence{
var c=self;
return M.allInstances().select(i|i.eClass.sameObj(c));
}


operation Any getDeprecated(): Real{

var c=self;
var isDeprecated=false;
var deprecated =0.0;
isDeprecated =  not c.eAnnotations.select(ea|ea.source="deprecated").isEmpty();

if(isDeprecated){

	deprecated = deprecated + (M.allInstances().select(i| c.sameObj(i.eClass)).size());
	
}
	
for (i in M.allInstances().select(i| c.sameObj(i.eClass))) { 
		deprecated = deprecated + (i.getNrSlotsDeprecatedForInstance() / i.getNrFilledSlots());
	} 

return deprecated;

}

operation Any getNrFilledSlots(): Real{
var slots = 0;
var i =self;
var c = self.eClass;

for (f in c.eAllStructuralFeatures) { 
	
			if(i.eGet(i.eClass().getEStructuralFeature(f.name)).isDefined()){
			slots++;
			}		
		}
	return slots;	
}

operation Any getNrSlotsDeprecatedForInstance(): Real{
	var deprecated_slots=0.0;
	
	var i=self;
	var c = self.eClass;
	for (f in c.eAllStructuralFeatures) { 
	var deprecated_f=not f.eAnnotations.select(ea|ea.source="deprecated").isEmpty();

			if(deprecated_f and i.eGet(i.eClass().getEStructuralFeature(f.name)).isDefined()){
		var occurrences = i.eGet(i.eClass().getEStructuralFeature(f.name)).size();
			deprecated_slots = deprecated_slots + occurrences;
			}		
		}
	
	return deprecated_slots;
}